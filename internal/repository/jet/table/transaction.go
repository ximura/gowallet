//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Transaction = newTransactionTable("public", "transaction", "")

type transactionTable struct {
	postgres.Table

	// Columns
	WalletID      postgres.ColumnInteger
	TransactionID postgres.ColumnString
	UpdatedAt     postgres.ColumnTimestampz
	CreatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TransactionTable struct {
	transactionTable

	EXCLUDED transactionTable
}

// AS creates new TransactionTable with assigned alias
func (a TransactionTable) AS(alias string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionTable with assigned schema name
func (a TransactionTable) FromSchema(schemaName string) *TransactionTable {
	return newTransactionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionTable with assigned table prefix
func (a TransactionTable) WithPrefix(prefix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionTable with assigned table suffix
func (a TransactionTable) WithSuffix(suffix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionTable(schemaName, tableName, alias string) *TransactionTable {
	return &TransactionTable{
		transactionTable: newTransactionTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newTransactionTableImpl("", "excluded", ""),
	}
}

func newTransactionTableImpl(schemaName, tableName, alias string) transactionTable {
	var (
		WalletIDColumn      = postgres.IntegerColumn("wallet_id")
		TransactionIDColumn = postgres.StringColumn("transaction_id")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		allColumns          = postgres.ColumnList{WalletIDColumn, TransactionIDColumn, UpdatedAtColumn, CreatedAtColumn}
		mutableColumns      = postgres.ColumnList{UpdatedAtColumn, CreatedAtColumn}
	)

	return transactionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WalletID:      WalletIDColumn,
		TransactionID: TransactionIDColumn,
		UpdatedAt:     UpdatedAtColumn,
		CreatedAt:     CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
